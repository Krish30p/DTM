import React, { useState } from 'react';
import { Calendar, User, BookOpen, Clock, LogOut, Plus, Trash2 } from 'lucide-react';

const CalendarComponent = ({ onBack }) => (
  <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-8">
    <div className="max-w-4xl mx-auto">
      <button
        onClick={onBack}
        className="mb-6 px-4 py-2 bg-white rounded-lg shadow hover:shadow-md transition-shadow"
      >
        ← Back
      </button>
      <div className="bg-white rounded-xl shadow-xl p-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 flex items-center gap-3">
          <Calendar className="text-purple-600" />
          Calendar View
        </h2>
        <p className="text-gray-600 mb-4">This is your Calendar component placeholder.</p>
        <div className="grid grid-cols-7 gap-2 mt-8">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="text-center font-semibold text-gray-700 p-2">
              {day}
            </div>
          ))}
          {Array.from({ length: 35 }, (_, i) => (
            <div key={i} className="aspect-square border border-gray-200 rounded p-2 hover:bg-purple-50 cursor-pointer">
              {i + 1 <= 30 ? i + 1 : ''}
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
);

const App = () => {
  const [currentView, setCurrentView] = useState('select');
  const [loggedInUser, setLoggedInUser] = useState(null);
  
  const [studentSelections, setStudentSelections] = useState({
    s1: { staff: [], subjectSchedules: [] },
    s2: { staff: [], subjectSchedules: [] },
    s3: { staff: [], subjectSchedules: [] }
  });

  const availableStaff = ['Dr. Smith', 'Prof. Johnson', 'Ms. Williams', 'Dr. Brown', 'Mr. Davis'];
  const availableSubjects = ['Mathematics', 'Physics', 'Chemistry', 'Biology', 'Computer Science', 'English', 'History'];
  
  const timeSlots = [
    { label: 'Hour 1', time: '08:00 - 08:50' },
    { label: 'Hour 2', time: '08:50 - 09:40' },
    { label: 'Hour 3', time: '09:45 - 10:35' },
    { label: 'Hour 4', time: '10:40 - 11:30' },
    { label: 'Hour 5', time: '11:35 - 12:25' },
    { label: 'Hour 6', time: '12:30 - 01:20' },
    { label: 'Hour 7', time: '01:25 - 02:15' },
    { label: 'Hour 8', time: '02:20 - 03:10' },
    { label: 'Hour 9', time: '03:10 - 04:00' },
    { label: 'Hour 10', time: '04:00 - 04:50' },
    { label: 'Hour 11', time: '04:50 - 05:30' },
    { label: 'Hour 12', time: '05:30 - 06:10' }
  ];

  const timetableData = {
    'Day 1': ['AA / X', 'F / X', 'F', 'G', 'P6', 'P7', 'P8', 'P9', 'P10', 'L11', 'L12'],
    'Day 2': ['P11', 'P12/X', 'P13/X', 'P14', 'P15', 'BB', 'G', 'G', 'A', 'L21', 'L22'],
    'Day 3': ['CC / X', 'A / X', 'D', 'B', 'P26', 'P27', 'P28', 'P29', 'P30', 'L31', 'L32'],
    'Day 4': ['P31', 'P32/X', 'P33/X', 'P34', 'P35', 'DD', 'B', 'E', 'C', 'L41', 'L42'],
    'Day 5': ['EE / X', 'C / X', 'F', 'D', 'P46', 'P47', 'P48', 'P49', 'P50', 'L51', 'L52']
  };

  const handleLogin = (type, id, pass) => {
    if (type === 'student' && ['s1', 's2', 's3'].includes(id) && id === pass) {
      setLoggedInUser({ type: 'student', id });
      setCurrentView('student-dashboard');
      return true;
    } else if (type === 'staff' && id === 'staff' && pass === 'staff') {
      setLoggedInUser({ type: 'staff', id });
      setCurrentView('staff-dashboard');
      return true;
    }
    return false;
  };

  const handleLogout = () => {
    setLoggedInUser(null);
    setCurrentView('select');
  };

  const updateStudentSelection = (studentId, field, value) => {
    setStudentSelections(prev => ({
      ...prev,
      [studentId]: {
        ...prev[studentId],
        [field]: value
      }
    }));
  };

  if (currentView === 'select') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl p-12 max-w-md w-full">
          <h1 className="text-4xl font-bold text-center mb-8 text-gray-800">
            Welcome to Portal
          </h1>
          <div className="space-y-4">
            <button
              onClick={() => setCurrentView('student-login')}
              className="w-full py-4 bg-blue-500 text-white rounded-xl font-semibold text-lg hover:bg-blue-600 transition-colors shadow-lg hover:shadow-xl flex items-center justify-center gap-3"
            >
              <User size={24} />
              Student Login
            </button>
            <button
              onClick={() => setCurrentView('staff-login')}
              className="w-full py-4 bg-purple-500 text-white rounded-xl font-semibold text-lg hover:bg-purple-600 transition-colors shadow-lg hover:shadow-xl flex items-center justify-center gap-3"
            >
              <BookOpen size={24} />
              Staff Login
            </button>
          </div>
        </div>
      </div>
    );
  }

  const LoginPage = ({ type }) => {
    const [id, setId] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const handleSubmit = () => {
      if (!handleLogin(type, id, password)) {
        setError('Invalid credentials');
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
          <button
            onClick={() => setCurrentView('select')}
            className="mb-4 text-gray-600 hover:text-gray-800"
          >
            ← Back
          </button>
          <h2 className="text-3xl font-bold text-center mb-6 text-gray-800">
            {type === 'student' ? 'Student Login' : 'Staff Login'}
          </h2>
          <div className="space-y-4">
            <div>
              <label className="block text-gray-700 font-semibold mb-2">ID</label>
              <input
                type="text"
                value={id}
                onChange={(e) => setId(e.target.value)}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                placeholder={type === 'student' ? 's1, s2, or s3' : 'staff'}
              />
            </div>
            <div>
              <label className="block text-gray-700 font-semibold mb-2">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSubmit()}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                placeholder="Enter password"
              />
            </div>
            {error && <p className="text-red-500 text-sm">{error}</p>}
            <button
              onClick={handleSubmit}
              className="w-full py-3 bg-blue-500 text-white rounded-lg font-semibold hover:bg-blue-600 transition-colors"
            >
              Login
            </button>
          </div>
        </div>
      </div>
    );
  };

  const StudentDashboard = () => {
    const studentId = loggedInUser.id;
    const selections = studentSelections[studentId];

    const toggleStaff = (staff) => {
      const current = selections.staff;
      const updated = current.includes(staff)
        ? current.filter(s => s !== staff)
        : [...current, staff];
      updateStudentSelection(studentId, 'staff', updated);
    };

    const addSubjectSchedule = () => {
      const newSchedule = {
        id: Date.now(),
        subject: '',
        staff: '',
        day: '',
        hour: '',
        period: ''
      };
      updateStudentSelection(studentId, 'subjectSchedules', [...selections.subjectSchedules, newSchedule]);
    };

    const removeSubjectSchedule = (id) => {
      updateStudentSelection(studentId, 'subjectSchedules', selections.subjectSchedules.filter(s => s.id !== id));
    };

    const updateSchedule = (id, field, value) => {
      const updated = selections.subjectSchedules.map(s => 
        s.id === id ? { ...s, [field]: value } : s
      );
      updateStudentSelection(studentId, 'subjectSchedules', updated);
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800">
              Welcome, {studentId.toUpperCase()}
            </h1>
            <div className="flex gap-3">
              <button
                onClick={() => setCurrentView('calendar')}
                className="px-6 py-3 bg-purple-500 text-white rounded-lg font-semibold hover:bg-purple-600 transition-colors flex items-center gap-2"
              >
                <Calendar size={20} />
                Calendar
              </button>
              <button
                onClick={handleLogout}
                className="px-6 py-3 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 transition-colors flex items-center gap-2"
              >
                <LogOut size={20} />
                Logout
              </button>
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-6 mb-8">
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-4 text-gray-800 flex items-center gap-2">
                <User className="text-blue-500" />
                Select Staff
              </h2>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {availableStaff.map(staff => (
                  <label key={staff} className="flex items-center gap-3 p-3 hover:bg-gray-50 rounded-lg cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selections.staff.includes(staff)}
                      onChange={() => toggleStaff(staff)}
                      className="w-5 h-5"
                    />
                    <span>{staff}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-4 text-gray-800 flex items-center gap-2">
                <Clock className="text-purple-500" />
                Weekly Timetable Reference
              </h2>
              <div className="overflow-x-auto text-xs">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="border p-2">Day</th>
                      {[1,2,3,4,5,6,7,8,9,10,11,12].map(h => (
                        <th key={h} className="border p-1">H{h}</th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(timetableData).map(([day, periods]) => (
                      <tr key={day}>
                        <td className="border p-2 font-semibold">{day}</td>
                        {periods.map((period, idx) => (
                          <td key={idx} className="border p-1 text-center">{period}</td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
                <BookOpen className="text-green-500" />
                Subject Schedule
              </h2>
              <button
                onClick={addSubjectSchedule}
                className="px-4 py-2 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 transition-colors flex items-center gap-2"
              >
                <Plus size={20} />
                Add Subject
              </button>
            </div>

            <div className="space-y-4">
              {selections.subjectSchedules.length === 0 ? (
                <p className="text-gray-500 text-center py-8">No subjects added yet. Click "Add Subject" to start.</p>
              ) : (
                selections.subjectSchedules.map((schedule) => (
                  <div key={schedule.id} className="border-2 border-gray-200 rounded-lg p-4 hover:border-blue-300 transition-colors">
                    <div className="grid md:grid-cols-6 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-1">Subject</label>
                        <select
                          value={schedule.subject}
                          onChange={(e) => updateSchedule(schedule.id, 'subject', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        >
                          <option value="">Select Subject</option>
                          {availableSubjects.map(sub => (
                            <option key={sub} value={sub}>{sub}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-1">Staff</label>
                        <select
                          value={schedule.staff}
                          onChange={(e) => updateSchedule(schedule.id, 'staff', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        >
                          <option value="">Select Staff</option>
                          {availableStaff.map(staff => (
                            <option key={staff} value={staff}>{staff}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-1">Day</label>
                        <select
                          value={schedule.day}
                          onChange={(e) => updateSchedule(schedule.id, 'day', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        >
                          <option value="">Select Day</option>
                          {Object.keys(timetableData).map(day => (
                            <option key={day} value={day}>{day}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-1">Hour</label>
                        <select
                          value={schedule.hour}
                          onChange={(e) => updateSchedule(schedule.id, 'hour', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        >
                          <option value="">Select Hour</option>
                          {timeSlots.map((slot, idx) => (
                            <option key={idx} value={slot.time}>{slot.label} ({slot.time})</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-1">Period</label>
                        <input
                          type="text"
                          value={schedule.period}
                          onChange={(e) => updateSchedule(schedule.id, 'period', e.target.value)}
                          placeholder="e.g., P6, AA"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
                        />
                      </div>

                      <div className="flex items-end">
                        <button
                          onClick={() => removeSubjectSchedule(schedule.id)}
                          className="w-full px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors flex items-center justify-center gap-2"
                        >
                          <Trash2 size={16} />
                          Remove
                        </button>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  const StaffDashboard = () => {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 p-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800">Staff Dashboard</h1>
            <div className="flex gap-3">
              <button
                onClick={() => setCurrentView('calendar')}
                className="px-6 py-3 bg-purple-500 text-white rounded-lg font-semibold hover:bg-purple-600 transition-colors flex items-center gap-2"
              >
                <Calendar size={20} />
                Calendar
              </button>
              <button
                onClick={handleLogout}
                className="px-6 py-3 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 transition-colors flex items-center gap-2"
              >
                <LogOut size={20} />
                Logout
              </button>
            </div>
          </div>

          <div className="space-y-6">
            {['s1', 's2', 's3'].map(studentId => (
              <div key={studentId} className="bg-white rounded-xl shadow-lg p-6">
                <h2 className="text-2xl font-bold mb-4 text-gray-800">
                  Student: {studentId.toUpperCase()}
                </h2>
                
                <div className="mb-6">
                  <h3 className="font-semibold text-lg mb-2 text-blue-600">Selected Staff:</h3>
                  {studentSelections[studentId].staff.length > 0 ? (
                    <div className="flex flex-wrap gap-2">
                      {studentSelections[studentId].staff.map(s => (
                        <span key={s} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">{s}</span>
                      ))}
                    </div>
                  ) : (
                    <p className="text-gray-500 italic">No staff selected</p>
                  )}
                </div>

                <div>
                  <h3 className="font-semibold text-lg mb-3 text-green-600">Subject Schedules:</h3>
                  {studentSelections[studentId].subjectSchedules.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full border-collapse">
                        <thead>
                          <tr className="bg-gray-100">
                            <th className="border p-3 text-left">Subject</th>
                            <th className="border p-3 text-left">Staff</th>
                            <th className="border p-3 text-left">Day</th>
                            <th className="border p-3 text-left">Time</th>
                            <th className="border p-3 text-left">Period</th>
                          </tr>
                        </thead>
                        <tbody>
                          {studentSelections[studentId].subjectSchedules.map(schedule => (
                            <tr key={schedule.id} className="hover:bg-gray-50">
                              <td className="border p-3">{schedule.subject || '-'}</td>
                              <td className="border p-3">{schedule.staff || '-'}</td>
                              <td className="border p-3">{schedule.day || '-'}</td>
                              <td className="border p-3">{schedule.hour || '-'}</td>
                              <td className="border p-3">{schedule.period || '-'}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <p className="text-gray-500 italic">No subject schedules added</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  if (currentView === 'calendar') {
    return <CalendarComponent onBack={() => setCurrentView(loggedInUser.type === 'student' ? 'student-dashboard' : 'staff-dashboard')} />;
  }

  if (currentView === 'student-login') return <LoginPage type="student" />;
  if (currentView === 'staff-login') return <LoginPage type="staff" />;
  if (currentView === 'student-dashboard') return <StudentDashboard />;
  if (currentView === 'staff-dashboard') return <StaffDashboard />;

  return null;
};

export default App;